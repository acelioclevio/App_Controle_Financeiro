import React, { useState, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';

const FinanceApp = () => {
  const currentYear = new Date().getFullYear().toString();
  const currentMonth = (new Date().getMonth() + 1).toString();
  
  const [transactions, setTransactions] = useState(() => {
    const saved = localStorage.getItem('transactions');
    return saved ? JSON.parse(saved) : [];
  });
  
  const [formData, setFormData] = useState({
    type: 'despesa',
    category: '',
    value: '',
    date: new Date().toISOString().split('T')[0],
    description: ''
  });
  
  const [filters, setFilters] = useState({
    type: 'despesa',
    category: 'todas',
    year: currentYear,
    month: currentMonth,
  });

  const categories = {
    receita: ['Salário', 'Investimentos', 'Freelance', 'Outros'],
    despesa: ['Alimentação', 'Transporte', 'Moradia', 'Saúde', 'Educação', 'Lazer', 'Outros']
  };

  const monthNames = [
    'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
  ];

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR');
  };

  useEffect(() => {
    localStorage.setItem('transactions', JSON.stringify(transactions));
  }, [transactions]);

  const handleSubmit = (e) => {
    e.preventDefault();
    const newTransaction = {
      ...formData,
      id: Date.now(),
      value: parseFloat(formData.value)
    };
    setTransactions([...transactions, newTransaction]);
    setFormData({
      type: 'despesa',
      category: '',
      value: '',
      date: new Date().toISOString().split('T')[0],
      description: ''
    });
  };

  const getCurrentMonthTransactions = () => {
    return transactions.filter(t => {
      const transactionDate = new Date(t.date);
      return (
        transactionDate.getFullYear() === new Date().getFullYear() &&
        transactionDate.getMonth() === new Date().getMonth()
      );
    });
  };

  const calculateMonthlyTotals = () => {
    const currentMonthTransactions = getCurrentMonthTransactions();
    
    const receitas = currentMonthTransactions
      .filter(t => t.type === 'receita')
      .reduce((sum, t) => sum + t.value, 0);
    
    const despesas = currentMonthTransactions
      .filter(t => t.type === 'despesa')
      .reduce((sum, t) => sum + t.value, 0);
    
    const saldo = receitas - despesas;

    return { receitas, despesas, saldo };
  };

  const getYears = () => {
    const years = new Set(transactions.map(t => new Date(t.date).getFullYear()));
    years.add(parseInt(currentYear));
    return Array.from(years).sort((a, b) => b - a);
  };

  const getFilteredTransactions = () => {
    return transactions.filter(t => {
      const transactionDate = new Date(t.date);
      const transactionYear = transactionDate.getFullYear().toString();
      const transactionMonth = (transactionDate.getMonth() + 1).toString();
      
      return (
        (filters.type === 'todas' || t.type === filters.type) &&
        (filters.category === 'todas' || t.category === filters.category) &&
        transactionYear === filters.year &&
        transactionMonth === filters.month
      );
    });
  };

  const getTotal = (transactions) => {
    return transactions.reduce((sum, t) => sum + (t.type === 'receita' ? t.value : -t.value), 0);
  };

  const { receitas, despesas, saldo } = calculateMonthlyTotals();

  return (
    <div className="container mx-auto p-4 max-w-3xl">
      <h1 className="text-2xl font-bold mb-6 text-center">Controle Financeiro</h1>
      
      <Tabs defaultValue="dashboard" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard">Resumo</TabsTrigger>
          <TabsTrigger value="registro">Registro</TabsTrigger>
          <TabsTrigger value="consulta">Consulta</TabsTrigger>
        </TabsList>

        <TabsContent value="dashboard">
          <Card>
            <CardHeader>
              <CardTitle>Resumo do Mês Atual</CardTitle>
            </CardHeader>
            <CardContent className="grid grid-cols-3 gap-4">
              <div className="text-center">
                <h3 className="text-green-600 font-bold">Receitas</h3>
                <p>R$ {receitas.toFixed(2)}</p>
              </div>
              <div className="text-center">
                <h3 className="text-red-600 font-bold">Despesas</h3>
                <p>R$ {despesas.toFixed(2)}</p>
              </div>
              <div className="text-center">
                <h3 className={`font-bold ${saldo >= 0 ? 'text-green-600' : 'text-red-600'}`}>Saldo</h3>
                <p>R$ {saldo.toFixed(2)}</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="registro">
          <Card>
            <CardContent className="space-y-4 pt-4">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <Select
                    value={formData.type}
                    onValueChange={(value) => setFormData({...formData, type: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="despesa">Despesa</SelectItem>
                      <SelectItem value="receita">Receita</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Select
                    value={formData.category}
                    onValueChange={(value) => setFormData({...formData, category: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Categoria" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories[formData.type].map(cat => (
                        <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <Input
                  type="number"
                  placeholder="Valor"
                  value={formData.value}
                  onChange={(e) => setFormData({...formData, value: e.target.value})}
                  className="w-full"
                  step="0.01"
                />

                <Input
                  type="date"
                  value={formData.date}
                  onChange={(e) => setFormData({...formData, date: e.target.value})}
                  className="w-full"
                />

                <Input
                  placeholder="Descrição"
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  className="w-full"
                />

                <Button type="submit" className="w-full">
                  Registrar
                </Button>
              </form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="consulta">
          <Card>
            <CardContent className="space-y-4 pt-4">
              <div className="space-y-4">
                <RadioGroup
                  value={filters.type}
                  onValueChange={(value) => setFilters({...filters, type: value})}
                  className="flex space-x-4"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="todas" id="todas" />
                    <label htmlFor="todas">Todas</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="despesa" id="despesa" />
                    <label htmlFor="despesa">Despesa</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="receita" id="receita" />
                    <label htmlFor="receita">Receita</label>
                  </div>
                </RadioGroup>

                <Select
                  value={filters.category}
                  onValueChange={(value) => setFilters({...filters, category: value})}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Categoria" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="todas">Todas as categorias</SelectItem>
                    {filters.type !== 'todas' && 
                      categories[filters.type].map(cat => (
                        <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>

                <Select
                  value={filters.year}
                  onValueChange={(value) => setFilters({...filters, year: value})}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Ano" />
                  </SelectTrigger>
                  <SelectContent>
                    {getYears().map(year => (
                      <SelectItem key={year} value={year.toString()}>{year}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select
                  value={filters.month}
                  onValueChange={(value) => setFilters({...filters, month: value})}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Mês" />
                  </SelectTrigger>
                  <SelectContent>
                    {monthNames.map((month, index) => (
                      <SelectItem key={index + 1} value={(index + 1).toString()}>
                        {month}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead>
                      <tr className="border-b">
                        <th className="text-left p-2">Data</th>
                        <th className="text-left p-2">Tipo</th>
                        <th className="text-left p-2">Categoria</th>
                        <th className="text-right p-2">Valor</th>
                      </tr>
                    </thead>
                    <tbody>
                      {getFilteredTransactions().map(t => (
                        <tr key={t.id} className="border-b">
                          <td className="p-2">{formatDate(t.date)}</td>
                          <td className="p-2">{t.type}</td>
                          <td className="p-2">{t.category}</td>
                          <td className={`p-2 text-right ${t.type === 'receita' ? 'text-green-600' : 'text-red-600'}`}>
                            R$ {t.value.toFixed(2)}
                          </td>
                        </tr>
                      ))}
                      <tr className="font-bold">
                        <td colSpan="3" className="p-2 text-right">Total:</td>
                        <td className={`p-2 text-right ${getTotal(getFilteredTransactions()) >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          R$ {Math.abs(getTotal(getFilteredTransactions())).toFixed(2)}
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default FinanceApp;
